from semidefinite import *
from problem import *
import numpy as np
import picos as sdp
import cvxopt as cvx
prob = QuantumBilinearProblem()
rho=np.matrix([[0,0,0,0],[0,1/2,-1/2,0],[0,-1/2,1/2,0],[0,0,0,0]])
J=[[-rho,rho,-rho,rho],[rho,-rho,rho,-rho],[-rho,rho,rho,-rho],[rho,-rho,-rho,rho]]
prob.init_matrix_form([[2,2,2,2],[2,2,2,2]],J);
prob.add_constraint(prob.matvarX(0) >> 0.*np.identity(2))
prob.add_constraint(prob.matvarX(1) >> 0.*np.identity(2))
prob.add_constraint(prob.matvarX(2) >> 0.*np.identity(2))
prob.add_constraint(prob.matvarX(3) >> 0.*np.identity(2))
prob.add_constraint(prob.matvarY(3) >> 0.*np.identity(2))
prob.add_constraint(prob.matvarY(2) >> 0.*np.identity(2))
prob.add_constraint(prob.matvarY(1) >> 0.*np.identity(2))
prob.add_constraint(prob.matvarY(0) >> 0.*np.identity(2))
prob.add_constraint(prob.matvarY(0) + prob.matvarY(1) == np.identity(2))
prob.add_constraint(prob.matvarY(2) + prob.matvarY(3) == np.identity(2))
prob.add_constraint(prob.matvarX(2) + prob.matvarX(3) == np.identity(2))
prob.add_constraint(prob.matvarX(0) + prob.matvarX(1) == np.identity(2))